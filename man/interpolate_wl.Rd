% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spct.integrate.r
\name{interpolate_wl}
\alias{interpolate_wl}
\alias{interpolate_wl.default}
\alias{interpolate_wl.generic_spct}
\alias{interpolate_wl.generic_mspct}
\title{Map spectra to new wavelength values.}
\usage{
interpolate_wl(x, w.length.out, fill, length.out, ...)

\method{interpolate_wl}{default}(x, w.length.out, fill, length.out, ...)

\method{interpolate_wl}{generic_spct}(x, w.length.out = NULL, fill = NA, length.out = NULL, ...)

\method{interpolate_wl}{generic_mspct}(
  x,
  w.length.out = NULL,
  fill = NA,
  length.out = NULL,
  ...,
  .parallel = FALSE,
  .paropts = NULL
)
}
\arguments{
\item{x}{an R object}

\item{w.length.out}{numeric vector of wavelengths (nm)}

\item{fill}{a value to be assigned to out of range wavelengths}

\item{length.out}{numeric value}

\item{...}{not used}

\item{.parallel}{if TRUE, apply function in parallel, using parallel backend
provided by foreach}

\item{.paropts}{a list of additional options passed into the foreach function
when parallel computation is enabled. This is important if (for example)
your code relies on external data or packages: use the .export and
.packages arguments to supply them so that all cluster nodes have the
correct environment set up for computing.}
}
\value{
A new spectral object or collection of spectral objects, of the same
  class as argument \code{x}. Each spectrum returned with more or fewer rows
  than in \code{x}, the requested new \code{w.length} values and new numeric
  values for spectral quantities, obtained by interpolation.
}
\description{
This function returns the result of interpolating spectral data from the original set of
wavelengths to a new one.
}
\details{
Depending on the extent of the data natural spline interpolation or
  linear interpolation are used. In the first case a call to
  \code{\link[stats:splinefun]{spline}} with \code{method = "natural"} is
  used when 25 or fewer distinct wavelengths are available as input, or if
  the wavelengths in the output are more than three times those in the input.
  In the second case, a call to \code{\link[stats:approxfun]{approx}} is
  used.

  If \code{w.length.out} is a numeric vector and \code{length.out = NULL}, it
  directly gives the target wavelengths for interpolation. If it is
  \code{NULL}, and \code{length.out} is an integer value evenly spaced
  wavelength values covering the same wavelength range as in the input are
  generated. If \code{w.length.out} is a numeric vector and \code{length.out}
  is an integer value, \code{length.out} evenly spaced wavelengths covering
  the wavelength range of \code{w.length.out} are generated.
  \emph{Extrapolation is not supported.}

  With default \code{fill = NA} if the output exceeds the wavelength range of
  the input, extrapolated values are filled with \code{NA} values. With
  \code{fill = NULL} wavelengths outside the wavelength range of input data
  are discarded. A numerical value can be also be provided as fill. While
  \code{interpolate_spectrum} supports interpolation of a single numeric
  vector, \code{interpolate_wl} applies, one at a time, interpolation to all
  numeric columns found in \code{x}.
}
\section{Methods (by class)}{
\itemize{
\item \code{interpolate_wl(default)}: Default for generic function

\item \code{interpolate_wl(generic_spct)}: Interpolate wavelength in an object of class
"generic_spct" or derived.

\item \code{interpolate_wl(generic_mspct)}: Interpolate wavelength in an object of class
"generic_mspct" or derived.

}}
\examples{
interpolate_wl(sun.spct, 400:500, NA)
interpolate_wl(sun.spct, 400:500, NULL)
interpolate_wl(sun.spct, seq(200, 1000, by=0.1), 0)
interpolate_wl(sun.spct, c(400,500), length.out=201)

}
\concept{interpolate functions}
