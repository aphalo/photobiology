% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spct.peaks.r
\name{find_peaks}
\alias{find_peaks}
\alias{find_valleys}
\title{Find local maxima or global maximum (peaks)}
\usage{
find_peaks(
  x,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  span = 3,
  strict = FALSE,
  na.rm = FALSE
)

find_valleys(
  x,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "maximum",
  threshold.range = NULL,
  span = 3,
  strict = FALSE,
  na.rm = FALSE
)
}
\arguments{
\item{x}{numeric vector. Hint: to find valleys, change the sign of the
argument with the unary operator \code{-}.}

\item{global.threshold}{numeric A value belonging to class \code{"AsIs"} is
interpreted as an absolute minimum height or depth expressed in data units.
A bare \code{numeric} value (normally between 0.0 and 1.0), is interpreted
as relative to \code{threshold.range}. In both cases it sets a
\emph{global} height (depth) threshold below which peaks (valleys) are
ignored. A bare negative \code{numeric} value indicates the \emph{global}
height (depth) threshold below which peaks (valleys) are be ignored. If
\code{global.threshold = NULL}, no threshold is applied and all peaks
returned.}

\item{local.threshold}{numeric A value belonging to class \code{"AsIs"} is
interpreted as an absolute minimum height (depth) expressed in data units
relative to a within-window computed reference value. A bare \code{numeric}
value (normally between 0.0 and 1.0), is interpreted as expressed in units
relative to \code{threshold.range}. In both cases \code{local.threshold}
sets a \emph{local} height (depth) threshold below which peaks (valleys)
are ignored. If \code{local.threshold = NULL} or if \code{span} spans the
whole of \code{x}, no threshold is applied.}

\item{local.reference}{character One of \code{"minimum"} or \code{"median"}.
The reference used to assess the height of the peak, either the minimum
value within the window or the median of all values in the window.}

\item{threshold.range}{numeric vector If of length 2 or a longer vector
\code{range(threshold.range)} is used to scale both thresholds. With
\code{NULL}, the default, \code{range(x)} is used, and with a vector of
length one \code{range(threshold.range, x)} is used, i.e., the range
is expanded.}

\item{span}{odd positive integer A peak is defined as an element in a
sequence which is greater than all other elements within a moving window of
width \code{span} centred at that element. The default value is 5, meaning
that a peak is taller than its four nearest neighbours. \code{span = NULL}
extends the span to the whole length of \code{x}.}

\item{strict}{logical flag: if TRUE, an element must be strictly greater than
all other values in its window to be considered a peak. Default: FALSE
(since version 0.13.1).}

\item{na.rm}{logical indicating whether \code{NA} values should be stripped
before searching for peaks.}
}
\value{
A vector of logical values of the same length as \code{x}. Values
  that are TRUE correspond to local peaks in vector \code{x} and can be used
  to extract the rows corresponding to peaks from a data frame.
}
\description{
These functions find peaks (local maxima) and valleys (local minima) in a
numeric vector, using a user selectable span and global and local size
thresholds, returning a \code{logical} vector.
}
\details{
Function \code{find_peaks} is a wrapper built onto function
  \code{\link[splus2R]{peaks}} from \pkg{splus2R}, adds support for peak
  height thresholds and handles \code{span = NULL} and non-finite (including
  NA) values differently than \code{splus2R::peaks}. Instead of giving an
  error when \code{na.rm = FALSE} and \code{x} contains \code{NA} values,
  \code{NA} values are replaced with the smallest finite value in \code{x}.
  \code{span = NULL} is treated as a special case and selects \code{max(x)}.
  Passing `strict = TRUE` ensures that multiple global and within window
  maxima are ignored, and can result in no peaks being returned.

  Two tests make it possible to ignore irrelevant peaks. One test
  (\code{global.threshold}) is based on the absolute height of the peaks and
  can be used in all cases to ignore globally low peaks. A second test
  (\code{local.threshold}) is available when the window defined by `span`
  does not include all observations and can be used to ignore peaks that are
  not locally prominent. In this second approach the height of each peak is
  compared to a summary computed from other values within the window of width
  equal to \code{span} where it was found. In this second case, the reference
  value used within each window containing a peak is given by
  \code{local.reference}. Parameter \code{threshold.range} determines how the
  values passed as argument to \code{global.threshold} and
  \code{local.threshold} are scaled. The default, \code{NULL} uses the range
  of \code{x}. Thresholds for ignoring too small peaks are applied after
  peaks are searched for, and threshold values can in some cases
  result in no peaks being returned.

  While function \code{find_peaks} accepts as input a \code{numeric} vector
  and returns a \code{logical} vector, methods \code{\link{peaks}} and
  \code{\link{valleys}} accept as input different R objects, including
  spectra and collections of spectra and return a subset of the object. These
  methods are implemented using calls to functions \code{find_peaks} and
  \code{\link{fit_peaks}}.
}
\note{
The default for parameter \code{strict} is \code{FALSE} in functions
  \code{peaks()} and \code{find_peaks()}, as in \code{stat_peaks()} and in
  \code{stat_valleys()}, while the default in \code{\link[splus2R]{peaks}}
  is \code{strict = FALSE}.
}
\examples{
with(sun.data, which(find_peaks(s.e.irrad, span = NULL)))
with(sun.data, which(find_peaks(s.e.irrad, span = 51)))
with(sun.data, w.length[find_peaks(s.e.irrad, span = 51)])
with(sun.data, sum(find_peaks(s.e.irrad, span = NULL, strict = TRUE)))

with(sun.data, which(find_valleys(s.e.irrad, span = NULL)))
with(sun.data, which(find_valleys(s.e.irrad, span = 51)))

}
\seealso{
\code{\link[splus2R]{peaks}}.

Other peaks and valleys functions: 
\code{\link{find_spikes}()},
\code{\link{peaks}()},
\code{\link{replace_bad_pixs}()},
\code{\link{spikes}()},
\code{\link{valleys}()},
\code{\link{wls_at_target}()}
}
\concept{peaks and valleys functions}
