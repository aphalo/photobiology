% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spct.peaks.r
\name{valleys}
\alias{valleys}
\alias{valleys.default}
\alias{valleys.numeric}
\alias{valleys.data.frame}
\alias{valleys.generic_spct}
\alias{valleys.source_spct}
\alias{valleys.response_spct}
\alias{valleys.filter_spct}
\alias{valleys.reflector_spct}
\alias{valleys.solute_spct}
\alias{valleys.cps_spct}
\alias{valleys.raw_spct}
\alias{valleys.generic_mspct}
\alias{valleys.source_mspct}
\alias{valleys.response_mspct}
\alias{valleys.filter_mspct}
\alias{valleys.reflector_mspct}
\alias{valleys.solute_mspct}
\alias{valleys.cps_mspct}
\alias{valleys.raw_mspct}
\title{Valleys or local minima}
\usage{
valleys(
  x,
  span,
  global.threshold,
  local.threshold,
  local.reference,
  threshold.range,
  strict,
  ...
)

\method{valleys}{default}(
  x,
  span,
  global.threshold = NA,
  local.threshold = NA,
  local.reference = NA,
  threshold.range = NA,
  strict,
  ...
)

\method{valleys}{numeric}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "median",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  ...
)

\method{valleys}{data.frame}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "median",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  x.var.name = NULL,
  y.var.name = NULL,
  var.name = y.var.name,
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{generic_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "median",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = NULL,
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{source_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "median",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  unit.out = getOption("photobiology.radiation.unit", default = "energy"),
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{response_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  unit.out = getOption("photobiology.radiation.unit", default = "energy"),
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{filter_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  filter.qty = getOption("photobiology.filter.qty", default = "transmittance"),
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{reflector_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{solute_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{cps_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = "cps",
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{raw_spct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = "counts",
  refine.wl = FALSE,
  method = "spline",
  ...
)

\method{valleys}{generic_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = NULL,
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{source_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  unit.out = getOption("photobiology.radiation.unit", default = "energy"),
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{response_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  unit.out = getOption("photobiology.radiation.unit", default = "energy"),
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{filter_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  filter.qty = getOption("photobiology.filter.qty", default = "transmittance"),
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{reflector_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{solute_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{cps_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = "cps",
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)

\method{valleys}{raw_mspct}(
  x,
  span = 5,
  global.threshold = NULL,
  local.threshold = NULL,
  local.reference = "minimum",
  threshold.range = NULL,
  strict = FALSE,
  na.rm = FALSE,
  var.name = "counts",
  refine.wl = FALSE,
  method = "spline",
  ...,
  .parallel = FALSE,
  .paropts = NULL
)
}
\arguments{
\item{x}{numeric vector.}

\item{span}{odd positive integer A peak is defined as an element in a
sequence which is greater than all other elements within a moving window of
width \code{span} centred at that element. The default value is 5, meaning
that a peak is taller than its four nearest neighbours. \code{span = NULL}
extends the span to the whole length of \code{x}.}

\item{global.threshold}{numeric A value belonging to class \code{"AsIs"} is
interpreted as an absolute minimum height or depth expressed in data units.
A bare \code{numeric} value (normally between 0.0 and 1.0), is interpreted
as relative to \code{threshold.range}. In both cases it sets a
\emph{global} height (depth) threshold below which peaks (valleys) are
ignored. A bare negative \code{numeric} value indicates the \emph{global}
height (depth) threshold below which peaks (valleys) are be ignored. If
\code{global.threshold = NULL}, no threshold is applied and all peaks
returned.}

\item{local.threshold}{numeric A value belonging to class \code{"AsIs"} is
interpreted as an absolute minimum height (depth) expressed in data units
relative to a within-window computed reference value. A bare \code{numeric}
value (normally between 0.0 and 1.0), is interpreted as expressed in units
relative to \code{threshold.range}. In both cases \code{local.threshold}
sets a \emph{local} height (depth) threshold below which peaks (valleys)
are ignored. If \code{local.threshold = NULL} or if \code{span} spans the
whole of \code{x}, no threshold is applied.}

\item{local.reference}{character One of \code{"median"}, \code{"median.log"},
\code{"median.sqrt"}, \code{"farthest"}, \code{"farthest.log"} or
\code{"farthest.sqrt"}. The reference used to assess the height of the
peak, either the minimum/maximum value within the window or the median of
all values in the window.}

\item{threshold.range}{numeric vector If of length 2 or a longer vector
\code{range(threshold.range)} is used to scale both thresholds. With
\code{NULL}, the default, \code{range(x)} is used, and with a vector of
length one \code{range(threshold.range, x)} is used, i.e., the range
is expanded.}

\item{strict}{logical flag: if \code{TRUE}, an element must be strictly
greater than all other values in its window to be considered a peak.}

\item{...}{ignored}

\item{na.rm}{logical indicating whether \code{NA} values should be stripped
before searching for peaks.}

\item{var.name, x.var.name, y.var.name}{character Name of column where to look
for valleys.}

\item{refine.wl}{logical Flag indicating if valley location should be refined by
fitting a function.}

\item{method}{character String with the name of a method. Currently only
spline interpolation is implemented.}

\item{unit.out}{character One of "energy" or "photon"}

\item{filter.qty}{character One of "transmittance" or "absorbance"}

\item{.parallel}{if TRUE, apply function in parallel, using parallel backend
provided by foreach}

\item{.paropts}{a list of additional options passed into the foreach function
when parallel computation is enabled. This is important if (for example)
your code relies on external data or packages: use the .export and
.packages arguments to supply them so that all cluster nodes have the
correct environment set up for computing.}
}
\value{
A subset of \code{x} with rows corresponding to local minima or
  global minimum.
}
\description{
Function that returns a subset of an R object with observations corresponding
to local maxima.
}
\details{
As \code{\link[photobiology]{find_valleys}},
  \code{\link[photobiology]{peaks}} and \code{\link[photobiology]{valleys}}
  call \code{\link[photobiology]{find_peaks}} to search for peaks and
  valleys, this explanation applies to the four functions. It also applies to
  \code{\link[ggspectra]{stat_peaks}} and
  \code{\link[ggspectra:stat_peaks]{stat_valleys}}. Function
  \code{find_peaks} is a wrapper built onto function
  \code{\link[splus2R]{peaks}} from \pkg{splus2R}, adds support for peak
  height thresholds and handles \code{span = NULL} and non-finite (including
  NA) values differently than \code{splus2R::peaks}. Instead of giving an
  error when \code{na.rm = FALSE} and \code{x} contains \code{NA} values,
  \code{NA} values are replaced with the smallest finite value in \code{x}.
  \code{span = NULL} is treated as a special case and selects \code{max(x)}.
  Passing \code{strict = TRUE} ensures that non-unique global and within window
  maxima are ignored, and can result in no peaks being returned.

  Two tests make it possible to ignore irrelevant peaks. One test
  (\code{global.threshold}) is based on the absolute height of the peaks and
  can be used in all cases to ignore globally low peaks. A second test
  (\code{local.threshold}) is available when the window defined by `span`
  does not include all observations and can be used to ignore peaks that are
  not locally prominent. In this second approach the height of each peak is
  compared to a summary computed from other values within the window of width
  equal to \code{span} where it was found. In this second case, the reference
  value used within each window containing a peak is given by the argument
  passed to \code{local.reference}. Parameter \code{threshold.range}
  determines how the values passed as argument to \code{global.threshold} and
  \code{local.threshold} are scaled. The default, \code{NULL} uses the range
  of \code{x}. Thresholds for ignoring too small peaks are applied after
  peaks are searched for, and threshold values can in some cases result in no
  peaks being returned.

  The \code{local.threshold} argument is used \emph{as is} when
  \code{local.reference} is \code{"median"} or \code{"farthest"}, i.e., the
  same distance between peak and reference is used as cut-off irrespective of
  the value of the reference. In cases when the prominence of peaks is
  positively correlated with the baseline, a \code{local.threshold} that
  increases together with increasing computed within window median or
  farthest value applies apply a less stringent height requirement in regions
  with overall low height. In this case, natural logarithm or square root
  weighting can be requested with \code{local.reference} arguments
  \code{"median.log"}, \code{"farthest.log"}, \code{"median.sqrt"}, and
  \code{"farthest.sqrt"} as arguments for \code{local.reference}.

  While functions \code{\link{find_peaks}} and \code{\link{find_valleys}}
  accept as input a \code{numeric} vector and return a \code{logical} vector,
  methods \code{\link{peaks}} and \code{\link{valleys}} accept as input
  different R objects, including spectra and collections of spectra and
  return a subset of the object. These methods are implemented using calls to
  functions \code{find_peaks}, \code{find_valleys} and
  \code{\link{fit_peaks}}.
}
\note{
The default for parameter \code{strict} is \code{FALSE} in functions
  \code{\link{find_peaks}} and \code{\link{find_valleys}}, while the default
  in \code{\link[splus2R]{peaks}} is \code{strict = TRUE}.
}
\examples{
# default span = 5
valleys(sun.spct)
# global minimum
valleys(sun.spct, span = NULL)
valleys(sun.spct, span = NULL, strict = FALSE)
# a wider window
valleys(sun.spct, span = 51)
# global threshold relative to the range of s.e.irrad values
valleys(sun.spct, global.threshold = -0.2)
# global threshold in actual s.e.irrad values
valleys(sun.spct, global.threshold = -0.2, threshold.range = c(0, 1))
# local threshold  relative to the range of s.e.irrad values
valleys(sun.spct, local.threshold = 0.1)
# local threshold in actual s.e.irrad values
valleys(sun.spct, local.threshold = 0.1, threshold.range = c(0, 1))
# local threshold  relative to the range of s.e.irrad values, using window
# median instead of window minimum
valleys(sun.spct, local.threshold = 0.1, local.reference = "median")
# minimum, the default.
valleys(sun.spct, local.threshold = 0.1, local.reference = "farthest")

valleys(sun.spct)

}
\seealso{
Other peaks and valleys functions: 
\code{\link{find_peaks}()},
\code{\link{find_spikes}()},
\code{\link{get_peaks}()},
\code{\link{peaks}()},
\code{\link{replace_bad_pixs}()},
\code{\link{spikes}()},
\code{\link{wls_at_target}()}
}
\concept{peaks and valleys functions}
