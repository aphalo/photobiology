%\VignetteEngine{knitr}
%\VignetteIndexEntry{Functions for quantifying VIS and UV radiation}
%\VignetteDepends{knitr, photobiology, photobiologyUV, photobiologyVIS}
%\VignetteKeyword{misc}

\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[unicode=true,pdfusetitle,
 bookmarks=true,bookmarksnumbered=true,bookmarksopen=true,bookmarksopenlevel=2,
 breaklinks=false,pdfborder={0 0 1},backref=false,colorlinks=false]
 {hyperref}
\usepackage{listings}
\usepackage{booktabs}
\usepackage{breakurl}
\usepackage{xspace}

\newcommand{\PB}{\textsf{photobiology}\xspace}
\newcommand{\PBVIS}{\textsf{photobiologyVIS}\xspace}
\newcommand{\PBUV}{\textsf{photobiologyUV}\xspace}
\newcommand{\PBPHY}{\textsf{photobiologyPhy}\xspace}
\newcommand{\PBCRY}{\textsf{photobiologyCry}\xspace}
\newcommand{\PBFLT}{\textsf{photobiologyFilters}\xspace}

\newcommand{\watt}{W m-2}
\newcommand{\wattnm}{W m-2 nm-1}
\newcommand{\mwattnm}{mW m-2 nm-1}

\begin{document}

\title{\PB Version 0.1.0\\Examples}
\author{Pedro J. Aphalo}

\maketitle

\section{Introduction}

This vignette presents some examples of the combined use of the different R packages
that we have written for radiation quantification in photobiological research.
See the Manuals and help files for the different pckages in this suite for
detailed description of individual functions and data sets.

<<setup, include=FALSE, cache=FALSE>>=
library(knitr)
opts_chunk$set(fig.path='figure/pos-', fig.align='center', fig.show='hold', size="footnotesize", dev='cairo_pdf')
options(replace.assign=TRUE,width=60)
@

\section{Using simulated solar spectra}

For this example we start from three separate files of output from a simualtion model. Each
file contains solar radiation spectra at hourly intervals during daytime hours. The file
has some comments that cause no trouble, but they also have lines with \texttt{end} at the end of
each spectrum. We use \textt{grep} to delete these lines, and to prepend the name of the file (giving 
the date) to each line of the file. We then use \textt{sed} to replace the end of the file names,
with a space. The last two files are appended, so we get a single file for the the whole
data set. The commands are written into a shell script or batch file, so that they can be
run again at a later time, and also so that there is a record of how the data was edited.

If you install Rtools or any other set of Gnu/Unix like commandline commands, then you should
be able to run these commands as a batch file, or if use bash run them as a shell script.


\begin{verbatim}
rm spectra.txt
grep -H -v 'end' 2010-06-22.hel > spectra.txt
grep -H -v 'end' 2010-06-23.hel >> spectra.txt
grep -H -v 'end' 2010-06-23.hel >> spectra.txt
sed -i 's/.hel:/ /g' spectra.text
cat spectra.txt
\end{verbatim}

The output file (a text or ASCII file with columns separated by spaces) is now ready to be read
from R. Below you can see the contents of the file \texttt{read.files.r}. It is best to have
separate scripts for different stages of the data analysis. The commands in this file read
the contents of \textt{spectra.txt} and do some simple calcualtions to adjust the time to the
local solar time and to adjust the units used for wavelength and spectral irradiance to those
expected by the functions in the \PB suite of R packages.

<<read-files-r, eval=FALSE>>=
# read files with hourly data for one day as sent by Anders
# preporcess data with clean.merge.data.sh (needs Unix-like envir, tested using bash in windows)
spectra.data <- read.table("spectra.txt", col.names=c("date", "UTC.min","w.length.A","s.e.irrad"))
# solar noon was at 13:23
# local summer time is UTC +3
# solar noon is at UTC 10:23
spectra.data$date.fac <- factor(spectra.data$date) 
delta.time <- 12*60 - (10*60 + 23)
spectra.data$solar.time.min <- spectra.data$UTC.min + delta.time
spectra.data$solar.time.h <- spectra.data$solar.time.min / 60
spectra.data$solar.time.fac <- factor(round(spectra.data$solar.time.h))
spectra.data$w.length <- spectra.data$w.length.A / 10 # nm
spectra.data$s.e.irrad <- spectra.data$s.e.irrad / 1e3 # mW m-2 nm-1 -> W m-2 nm-1
@

The next step is to calculate irradiances for different bands, photon ratios and effective
doses. The commands needed for this are in the script file \textt{calc.doses.r}, which contents
are listed below.

<<calc-doses-r, eval=FALSE>>=
# calculating doses
library(plyr)
library(photobiology)
library(photobiologyVIS)
library(photobiologyUV)
library(photobiologyPhy)
library(photobiologyCry)
library(photobiologyFilters)
rm(irrad.data)
filters <- c("clear","polyester.new","polythene.new", "uv.226.new")
filtered.spectra.data <- spectra.data
for (filter in filters){
  filtered.spectra.data$s.e.irrad <- spectra.data$s.e.irrad * calc_filter_multipliers(spectra.data$w.length, filter)
  
  temp.data <- ddply(filtered.spectra.data, .(date, solar.time.fac), summarize, 
                     UTC.min = UTC.min[1], solar.time.h = solar.time.h[1], filter=filter,
                     PPFD = photon_irradiance(w.length, s.e.irrad, PAR()) * 1e6,
                     PAR = energy_irradiance(w.length, s.e.irrad, PAR()),
                     UVB.UVA.ratio = photon_ratio(w.length, s.e.irrad, UVB(), UVA()),
                     UVB.PAR.ratio = photon_ratio(w.length, s.e.irrad, UVB(), PAR()),
                     B.G.ratio = B_G_ratio(w.length, s.e.irrad),
                     Pr.P.ratio = Pr_P_ratio(w.length, s.e.irrad),
                     CRY2.Abs = photon_irradiance(w.length, s.e.irrad, CRY2.Abs(450)),
                     UVR8.Abs = photon_irradiance(w.length, s.e.irrad, UVR8.Abs(300)),
                     UVR8_CRY2.ratio = (UVR8.Abs / CRY2.Abs) * 1e3,
                     GEN.G = energy_irradiance(w.length, s.e.irrad, GEN.G(300)),
                     PG = energy_irradiance(w.length, s.e.irrad, PG(300)),
                     CIE = energy_irradiance(w.length, s.e.irrad, CIE(298)),
                     DNA.N = energy_irradiance(w.length, s.e.irrad, DNA.N(300)) )
  if (!exists("irrad.data")) {
    irrad.data <- temp.data
  } else {
    irrad.data <- rbind(irrad.data, temp.data)
  }
}
rm(temp.data)

# calc daily doses/integrals
daily.integrals.data <- ddply(irrad.data, .(date,filter), summarize, filter=filter[1],
                              PPFD=sum(PPFD)*1e-6*3600, # mol d-1
                              PAR=sum(PAR)*3.6e-3, # MJ d-1
                              GEN.G=sum(GEN.G)*3.6, # kJ d-1 eff
                              PG=sum(PG)*3.6, # kJ d-1 eff
                              CIE=sum(CIE)*3.6, # kJ d-1 eff
                              DNA.N=sum(DNA.N)*3.6 # kJ d-1 eff
                              )

@

The next step is to plot the changes through each of the days. The commands for this are in file \texttt{plot.irrad.r}.

<<plot-irrad-r, fig.show=FALSE, eval=FALSE>>=
# plot irradiances and doses for Luis
library(ggplot2)
figPPFD <- ggplot(data=irrad.data, aes(x=solar.time.h, y=PPFD, colour=factor(filter)))
figPPFD <- figPPFD + facet_wrap(~ date) + geom_line() + geom_point()
print(figPPFD)

figCRY <- ggplot(data=irrad.data, aes(x=solar.time.h, y=CRY2.Abs, colour=factor(filter)))
figCRY <- figCRY + facet_wrap(~ date) + geom_line() + geom_point()
print(figCRY)

figUVR8 <- ggplot(data=irrad.data, aes(x=solar.time.h, y=UVR8.Abs, colour=factor(filter)))
figUVR8 <- figUVR8 + facet_wrap(~ date) + geom_line() + geom_point()
print(figUVR8)

figGENG <- ggplot(data=irrad.data, aes(x=solar.time.h, y=GEN.G, colour=factor(filter)))
figGENG <- figGENG + facet_wrap(~ date) + geom_line() + geom_point()
print(figGENG)

figPG <- ggplot(data=irrad.data, aes(x=solar.time.h, y=PG, colour=factor(filter)))
figPG <- figPG + facet_wrap(~ date) + geom_line() + geom_point()
print(figPG)

figCIE <- ggplot(data=irrad.data, aes(x=solar.time.h, y=CIE, colour=factor(filter)))
figCIE <- figCIE + facet_wrap(~ date) + geom_line() + geom_point()
print(figCIE)

figDNAN <- ggplot(data=irrad.data, aes(x=solar.time.h, y=DNA.N, colour=factor(filter)))
figDNAN <- figDNAN + facet_wrap(~ date) + geom_line() + geom_point()
print(figDNAN)

figUVB.UVA <- ggplot(data=irrad.data, aes(x=solar.time.h, y=UVB.UVA.ratio, colour=factor(filter)))
figUVB.UVA <- figUVB.UVA + facet_wrap(~ date) + geom_line() + geom_point()
print(figUVB.UVA)

figUVB.PAR <- ggplot(data=irrad.data, aes(x=solar.time.h, y=UVB.PAR.ratio, colour=factor(filter)))
figUVB.PAR <- figUVB.PAR + facet_wrap(~ date) + geom_line() + geom_point()
print(figUVB.PAR)

figB.G <- ggplot(data=irrad.data, aes(x=solar.time.h, y=B.G.ratio, colour=factor(filter)))
figB.G <- figB.G + facet_wrap(~ date) + geom_line() + geom_point()
print(figB.G)

figPhy <- ggplot(data=irrad.data, aes(x=solar.time.h, y=Pr.P.ratio, colour=factor(filter)))
figPhy <- figPhy + facet_wrap(~ date) + geom_line() + geom_point()
print(figPhy)

@

Finally we create the PDF output with the commands in file \texttt{make.pdfs.r}. In this example we create one PDF file with one plot per page, and a second PDF file with a nicely formatted table.

<<make-pdfs-r, eval=FALSE>>=
# make figure pdfs
library(Cairo)
library(ggplot2)
CairoPDF("figs.pdf", width=8, height=6)
print(figPPFD)
print(figUVB.UVA)
print(figUVB.PAR)
print(figB.G)
print(figPhy)
print(figCRY)
print(figUVR8)
print(figGENG)
print(figPG)
print(figCIE)
print(figDNAN)
dev.off()

# make table
library(gridExtra)
CairoPDF("daily.integrals.tab.pdf", height=4.5, width=8)
grid.table(cbind(daily.integrals.data[,1:2],
                 sapply(daily.integrals.data[,-(1:2)], function(x){sprintf("%3.2f",signif(x,4))})), 
           core.just="right",cex=0.5)
dev.off()
@

\end{document}
